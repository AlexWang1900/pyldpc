.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_parallel_decoding.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_parallel_decoding.py:


==================================
Parallelization of Log-BP decoding
==================================

This example shows how coding and decoding can be done in parallel to speed
up computations.


.. code-block:: default


    from time import time

    import numpy as np

    from matplotlib import pyplot as plt

    from pyldpc import make_ldpc, decode, encode

    n = 100
    d_v = 2
    d_c = 5
    seed = 42
    rng = np.random.RandomState(seed)






First we create an LDPC code i.e a pair of decoding and coding matrices
H and G. H is a regular parity-check matrix with d_v ones per row
and d_c ones per column


.. code-block:: default


    H, G = make_ldpc(n, d_v, d_c, seed=seed, systematic=True, sparse=True)

    n, k = G.shape
    print("Number of coded bits:", k)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Number of coded bits: 61



Now we simulate transmission for different levels of noise and
compute the percentage of errors using the bit-error-rate score
To parallelize coding and decoding, simply stack the messages as columns:


.. code-block:: default


    n_messages = np.arange(1, 50)
    n_runs = 10
    snr = 10
    times_parallel = []
    times_sequential = []

    for pp in n_messages:
        t_parallel = 0
        t_seq = 0
        V = rng.randint(2, size=(k, pp))  # simulate messages
        Y = encode(G, V, snr, seed=seed)

        for _ in range(n_runs):
            t = time()
            decode(H, Y, snr)
            t_parallel += time() - t

            t = time()
            for y in Y.T:
                decode(H, y, snr)
            t_seq += time() - t
        times_sequential.append(t_seq / n_runs)
        times_parallel.append(t_parallel / n_runs)


    plt.figure()
    plt.plot(n_messages, times_sequential, color="indianred", lw=2,
             label="Sequential")
    plt.plot(n_messages, times_parallel, color="gold", lw=2, label="Parallel")
    plt.ylabel("Time (s)")
    plt.xlabel("# messages")
    plt.legend()
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_parallel_decoding_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hichamjanati/Documents/github/pyldpc/examples/plot_parallel_decoding.py:70: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.209 seconds)

**Estimated memory usage:**  21 MB


.. _sphx_glr_download_auto_examples_plot_parallel_decoding.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_parallel_decoding.py <plot_parallel_decoding.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_parallel_decoding.ipynb <plot_parallel_decoding.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
